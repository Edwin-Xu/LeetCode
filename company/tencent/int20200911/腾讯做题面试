1、给定一个整型数组和一个目标值，在数组中刚好有两个数之和等于此目标值。返回这两个数的下标。比如array = [5, 7, 13, 15]和sum = 12, array[0] + array[1] = 5 + 7 = 12,return [0, 1]。要求算法复杂度为0(N)。

public int[] getIndex(int[]nums,int sum){
    Map<Integer,Integer>map = new HashMap<>();
    int []res= new int[2];
    for(int i = 0;i< nums.length;i++){
        if(map.containsKey(sum-nums[i])){
            //找到了另一个数
            res[0] = i;
            res[1]= map.get(sum-nums[i]);
            return res;
        }else{
            map.put(nums[i],i);

        }
    }
    return res;

}

2、给定一颗二叉树，每个节点代表一个数字（0-9）。计算树的根节点到叶子节点的所有路径组成的数之和。如
Input: [1,2,3]
    1
   / \
  2   3
Output: 25
Explanation:
路径1: 1->2,代表数12
路径2：1->3,代表数13
所以，sum = 12 + 13 = 25

Input: [4,9,0,5,1]
    4
   / \
  9   0
 / \
5   1
Output: 1026
Explanation:
路径1: 4->9->5,代表数495.
路径2: 4->9->1,代表数491.
路径3: 4->0,代表数40.
所以, sum = 495 + 491 + 40 = 1026.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
int sumNumbers(struct TreeNode* root) {

}

//java:
class Main{
    private int res = 0;
    public int sumNumbers(TreeNode root){
        getSum(root,0);
        return res;

    }
    private void getSum(TreeNode root, int sum){
        if(root==null){
            return ;
        }
        if(root.left==null && root.right==null){
            //到达叶节点
            res += (sum+root.val);
        }
        else{
            getSum(root.left,sum*10);
            getSum(root.right,sum*10);
        }
    }


}








3、给两个单链表，找出他们的第一个公共节点
template <typename T>
struct ListNode {
  T data;
  ListNode* next;
};
template <typename T>
ListNode<T>* FindFirstCommonNode(ListNode<T>* head1, ListNode<T>* head2)



// 方法1：计算两个链表长度，得到差A，长链表先走A步，然后一起走直到相交点
// 方法2：双指针：都从头走，一个到达末尾后，跳到另一个的链表头
  // 设置两个指针，分别指向两个链表头结点，然后每次走一步，当有一个指针走到末尾的时候，跳到另一个链表的头部，然后继续走，最后二者会同时到达第一个公共节点
  //  1-2-3-4-5-null
  //    7-8-4-5-null
  // A指向1, B指向7，B先走到null， 然后跳到1，A走到null跳到7，这时A在7B在2，一起走就可以到达4，即公共节点


//这是方式2：
public ListNode getFirstPublicNode(ListNode head1, ListNode head2){
    if(head1==null||head2==null)return null;

    ListNode h1 = head1, h2 = head2;
    while(h1!=h2){
        h1 = h1.next;
        h2 = h2.next;
        //注意：长度相同时怎么办，需要h1\h2不同时为null？ 如果有公共节点，提前遇到公共节点；否则必须不同时为null，否则死循环
        if(h1==null){
            h1 = head2;
        }
        if(h2==null){
            h2 = head1;
        }
    }
    return h1;
}
//上面代码有个问题：
//到达末尾应该是在每次移动后
//而且需要重新判断是否相同了
    public ListNode FindFirstCommonNode(ListNode pHead1, ListNode pHead2) {
        if(pHead2==null || pHead1==null)return null;
        ListNode a = pHead1;
        ListNode b = pHead2;
        while(a!=b){

            a= a.next;
            b= b.next;

            //到达末尾应该是在每次移动后
            //而且需要重新判断是否相同了
             if(a==null && a!=b)a = pHead2;
            if(b==null && a!=b)b = pHead1;
        }
        return b;
    }




//第一种方式：
public ListNode getFirstPublicNode(ListNode head1, ListNode head2){
    int len1 = getLen(head1);
    int len2 = getLen(head2);
    if(len1<len2){ //保持head1不短于head2
        ListNode tmp = head1;
        head1 = head2;
        head2 = tmp;
    }
    for(int i =0;i<Math.abs(len1-len2)){
        head1 = head1.next; //head1先走长度差步
    }
    while(head1!=head2){//一起走到公共节点。
        head1 = head1.next;
        head2 = head2.next;
    }
    if(head1==null||head2==null)return null; //没有公共节点
    return head1;
}

private int getLen(ListNode head){
    int len = 0;
    ListNode cur = head;
    while(cur!=null){
        len++;
        cur = cur.next;
    }
    return len;
}







4、在字符串中删除特定的字符。输入两个字符串,从第一个字符串中删除第二个字符串中所有的字符，算法复杂度最好为O(N)
void DeleteChars(char* p_str_source, const char* p_str_delete)



public void deleteChars(String sourceStr,String delStr){
    Map<Character,Integer>map = new HashMap<>();
    for(int i =  0 ;i <delStr.length();i++){
        map.put(delStr.charAt(i),0);

    }
    StringBuilder sb = new StringBuilder(sourceStr);
    int delCnt = 0;
    for(int i = 0 ; i < sourceStr.length();i++){
        char c = sourceStr.charAt(i);
        if(map.containsKey(c)){
            //删除
            sb.deleteCharAt(i-delCnt);
            delCnt++;
        }

    }
    return sb.toString();
}





















5.40亿个随机排列的32位整数，找出X是否存在于40亿个数中，内存1GB



// 每次从40亿个数中读取一部分进行比较,
// 40亿个数：16 GB，分17次？

//


















hahao